using Microsoft.CodeAnalysis;
using System.Linq;
using System.Text;
using System.Text.Json; // Added for JsonDocument

namespace Ryujinx.UI.LocaleGenerator
{
    [Generator]
    public class LocaleGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            // Simplified Initialize for diagnostics
            context.RegisterPostInitializationOutput(ctx => ctx.AddSource(
                "TestGen.g.cs", 
                $"// LocaleGenerator was here! {System.DateTime.UtcNow}\n"));

            /* Original code commented out for diagnostics:
            // Log all additional file paths for debugging
            context.RegisterSourceOutput(context.AdditionalTextsProvider.Collect(), (spc, files) => {
                foreach (var file in files)
                {
                    spc.ReportDiagnostic(Diagnostic.Create(
                        new DiagnosticDescriptor("LOCGENINFO001", "AdditionalFile Path", $"Found additional file: {file.Path}", "LocaleGenerator", DiagnosticSeverity.Info, true),
                        Location.None));
                }
            });

            var englishLocaleFile = context.AdditionalTextsProvider.Where(static x => x.Path.EndsWith("en_US.json"));

            // Log if en_US.json was not found by the filter
            context.RegisterImplementationSourceOutput(englishLocaleFile.Collect(), (spc, files) => {
                if (!files.Any())
                {
                     spc.ReportDiagnostic(Diagnostic.Create(
                        new DiagnosticDescriptor("LOCGENWARN001", "en_US.json not found", "en_US.json was not found by the AdditionalTextsProvider filter.", "LocaleGenerator", DiagnosticSeverity.Warning, true),
                        Location.None));
                }
            });

            IncrementalValuesProvider<string> contents = englishLocaleFile.Select((text, cancellationToken) => text.GetText(cancellationToken)!.ToString());

            context.RegisterSourceOutput(contents, (spc, content) =>
            {
                    StringBuilder enumSourceBuilder = new();
                enumSourceBuilder.AppendLine("// <auto-generated/>");
                enumSourceBuilder.AppendLine("namespace Ryujinx.Ava.Common.Locale;");
                enumSourceBuilder.AppendLine("");
                enumSourceBuilder.AppendLine("internal enum LocaleKeys");
                enumSourceBuilder.AppendLine("{");

                try
                {
                    using (JsonDocument doc = JsonDocument.Parse(content))
                    {
                        foreach (JsonProperty property in doc.RootElement.EnumerateObject())
                        {
                            string keyName = property.Name;
                            // Ensure the key is a valid C# identifier (basic check, can be improved)
                            if (!string.IsNullOrEmpty(keyName) && (char.IsLetter(keyName[0]) || keyName[0] == '_'))
                            {
                                enumSourceBuilder.AppendLine($"    {keyName},");
                            }
                            // Else: Optionally report diagnostic for invalid key names
                        }
                    }
                }
                catch (JsonException ex)
                {
                    spc.ReportDiagnostic(Diagnostic.Create(
                        new DiagnosticDescriptor(
                            "LOCGEN001",
                            "Failed to parse en_US.json",
                            "Error parsing en_US.json: {0}",
                            "LocaleGenerator",
                            DiagnosticSeverity.Error,
                            isEnabledByDefault: true),
                        Location.None,
                        ex.Message));
                    return; // Do not generate a partial or incorrect enum file
                }
                
                enumSourceBuilder.AppendLine("}");

                spc.AddSource("LocaleKeys.g.cs", enumSourceBuilder.ToString());
            });
            */
        }
    }
}
